{"version":3,"sources":["redux/card/card.types.js","redux/card/card.actions.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/new-card-input/new-card-input.styles.js","redux/input/input.types.js","redux/input/input.actions.js","components/new-card-input/new-card-input.component.jsx","App.js","redux/card/card.reducer.js","redux/input/input.reducer.js","redux/root-reducer.js","redux/card/card.saga.js","redux/root-saga.js","redux/redux-store.js","index.js"],"names":["CardActionTypes","FETCH_CARDS_START","FETCH_CARDS_SUCCESS","FETCH_CARDS_FAILURE","SET_IS_LOADING","ADD_CARD","REMOVE_CARD","fetchCards","type","setIsLoading","value","payload","Card","card","first_name","last_name","id","email","idx","dispatch","useDispatch","className","alt","src","onClick","removeCard","CardList","cards","map","key","SearchBox","props","placeholder","onChange","onSearchChange","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","isFetching","visible","css","hidden","green","red","NewCardInputContainer","CustomMediumHeader","h2","CustomInput","input","CustomButton","button","name","InputActionTypes","SET_IS_VISIBLE","SET_USER_INPUT","CLEAR_INPUT_FIELDS","setInputVisible","clearInputFields","NewCardInput","useSelector","state","isVisible","firstName","lastName","handleInputChange","event","data","target","setVisibility","required","App","isLoading","useState","searchField","setSearchField","handleScroll","a","window","innerHeight","scrollY","offsetHeight","document","body","length","useEffect","addEventListener","removeEventListener","filteredCards","filter","toLowerCase","includes","INITIAL_STATE","error","cardReducer","action","concat","initialState","inputReducer","rootReducer","combineReducers","onFetchCardsStart","cardSagas","put","fetch","json","users","errorMessage","message","takeLatest","all","call","rootSaga","sagaMiddleWare","createSagaMiddleware","middleWares","logger","store","createStore","applyMiddleware","run","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.389abd9b.chunk.js","sourcesContent":["const CardActionTypes = {\r\n    FETCH_CARDS_START: 'FETCH_CARDS_START',\r\n    FETCH_CARDS_SUCCESS: 'FETCH_CARDS_SUCCESS',\r\n    FETCH_CARDS_FAILURE: 'FETCH_CARDS_FAILURE',\r\n    SET_IS_LOADING: 'SET_IS_LOADING',\r\n    ADD_CARD: 'ADD_CARD',\r\n    REMOVE_CARD: 'REMOVE_CARD'\r\n}\r\n\r\nexport default CardActionTypes;","import CardActionTypes from \"./card.types\";\r\n\r\nconst fetchCards = () => ({\r\n    type: CardActionTypes.FETCH_CARDS_START\r\n})\r\n\r\nconst fetchCardsSuccess = (cards) => ({\r\n    type: CardActionTypes.FETCH_CARDS_SUCCESS,\r\n    payload: cards\r\n})\r\n\r\nconst fetchCardsFailure = (errorMessage) => ({\r\n    type: CardActionTypes.FETCH_CARDS_FAILURE,\r\n    payload: errorMessage\r\n})\r\n\r\nconst setIsLoading = value => ({\r\n    type: CardActionTypes.SET_IS_LOADING,\r\n    payload: value\r\n})\r\n\r\nconst addCard = (data) => ({\r\n    type: CardActionTypes.ADD_CARD,\r\n    payload: data\r\n})\r\n\r\nconst removeCard = (idx) => ({\r\n    type: CardActionTypes.REMOVE_CARD,\r\n    payload: idx\r\n})\r\n\r\nexport { fetchCards, fetchCardsSuccess, fetchCardsFailure, setIsLoading, addCard, removeCard }","import React from \"react\";\r\nimport { removeCard } from '../../redux/card/card.actions';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = ({ card: { first_name, last_name, id, email }, idx }) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const handleDeleteClick = () => {\r\n    dispatch(removeCard(idx))\r\n  }\r\n\r\n  return (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"card\"\r\n      src={`https://robohash.org/${id}?set=set4&size=300x300`}\r\n    />\r\n    <h2> {`${first_name} ${last_name}`} </h2>\r\n    <p> {email} </p>\r\n    <button onClick={handleDeleteClick} className='delete-button'>X</button>\r\n  </div>\r\n  )\r\n};\r\n","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nconst CardList = ({ cards }) => (\r\n  <div className='card-list'>\r\n    {cards.map((card, idx) => (\r\n      <Card key={card.id || idx} idx={idx} card={card} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = props => (\r\n  <input\r\n    className='search-box'\r\n    type='search'\r\n    placeholder='search cat'\r\n    onChange={props.onSearchChange}\r\n  />\r\n);\r\n\r\nexport default SearchBox;","import styled from \"styled-components\";\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { SpinnerContainer, SpinnerOverlay } from \"./spinner.styles\";\r\n\r\nconst Spinner = ({ isFetching, ...otherProps }) => {\r\n  return isFetching ? (\r\n    <SpinnerOverlay>\r\n      <SpinnerContainer />\r\n    </SpinnerOverlay>\r\n  ) : null;\r\n};\r\n\r\nexport default Spinner;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst visible = css`\r\n    display: flex\r\n`\r\nconst hidden = css`\r\n    display: none;\r\n`\r\n\r\nconst green = css`\r\n    background-color:rgb(45,200,100);\r\n`\r\n\r\nconst red = css`\r\n    background-color: rgb(190,90,90);\r\n`\r\n\r\nconst setColor = ({ name }) => (\r\n    name === 'ok' ? green : red\r\n)\r\n\r\nconst setVisibility = props => (\r\n    props.visible ? visible : hidden\r\n)\r\n\r\nconst NewCardInputContainer = styled.div`\r\n    position: absolute;    \r\n    top: 20px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    width: 300px;\r\n    height: 200px;\r\n    padding: 20px;\r\n    box-shadow: 10px 10px 10px;   \r\n    display: flex;    \r\n    flex-direction: column;\r\n    gap: 5px;\r\n    align-items: center;\r\n    background-color: rgb(60, 100, 150);\r\n    border-radius: 15px;\r\n    ${setVisibility}\r\n`\r\n\r\nconst CustomMediumHeader = styled.h2`\r\n    font-family: 'Bigelow Rules';\r\n    font-size: 40px;\r\n    margin: 5px;\r\n`\r\n\r\nconst CustomInput = styled.input`\r\n    width: 250px;\r\n    height: 50px;\r\n    border: none;    \r\n    outline: none;\r\n    border-radius: 10px;\r\n    text-align: center;\r\n`\r\n\r\nconst CustomButton = styled.button`\r\n    height: 35px;\r\n    width: 60px;\r\n    border-radius: 10px;\r\n    border: none;\r\n    margin: 0 10px;\r\n    box-shadow: 3px 3px 8px black;\r\n    font-weight: 600;\r\n    color: white;\r\n    ${setColor}\r\n\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nexport { NewCardInputContainer, CustomInput, CustomButton, CustomMediumHeader }","const InputActionTypes = {\r\n    SET_IS_VISIBLE: 'SET_IS_VISIBLE',\r\n    SET_USER_INPUT: 'SET_USER_INPUT',\r\n    CLEAR_INPUT_FIELDS: 'CLEAR_INPUT_FIELDS'\r\n}\r\n\r\nexport default InputActionTypes;","import InputActionTypes from \"./input.types\";\r\n\r\nconst setInputVisible = value => ({\r\n    type: InputActionTypes.SET_IS_VISIBLE,\r\n    payload: value\r\n})\r\n\r\nconst clearInputFields = () => ({\r\n    type: InputActionTypes.CLEAR_INPUT_FIELDS\r\n})\r\n\r\nconst setUserInput = data => ({\r\n    type: InputActionTypes.SET_USER_INPUT,\r\n    payload: data\r\n})\r\n\r\nexport { setInputVisible, setUserInput, clearInputFields }","import React from \"react\";\r\nimport { NewCardInputContainer, CustomInput, CustomButton, CustomMediumHeader } from './new-card-input.styles';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addCard } from \"../../redux/card/card.actions\";\r\nimport { setInputVisible, setUserInput, clearInputFields } from '../../redux/input/input.actions'\r\n\r\nconst NewCardInput = () => {\r\n    const dispatch = useDispatch();\r\n    const visible = useSelector(state => state.input.isVisible)\r\n    const { firstName, lastName, email } = useSelector(state=> state.input);\r\n\r\n    const handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        dispatch(setUserInput({[name]: value}));\r\n    }\r\n    const handleSubmit = () => {\r\n        dispatch(addCard({first_name: firstName, last_name: lastName, email}))\r\n        dispatch(clearInputFields());\r\n        setVisibility(false);\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        dispatch(clearInputFields());\r\n        setVisibility(false);\r\n    }\r\n\r\n    const setVisibility = (value) => {\r\n        dispatch(setInputVisible(value))\r\n    }\r\n\r\n    return (\r\n        <NewCardInputContainer visible={visible}>\r\n            <CustomMediumHeader>Add a new Contact</CustomMediumHeader>\r\n            <CustomInput onChange={handleInputChange} type='text' placeholder=\"First Name\" name='firstName' value={firstName} required/>\r\n            <CustomInput onChange={handleInputChange} type='text' placeholder=\"Last Name\" name='lastName' value={lastName} required/>\r\n            <CustomInput onChange={handleInputChange} type='email' placeholder=\"Email\" name='email' value={email} required/>\r\n            <div>\r\n                <CustomButton onClick={handleSubmit} name='ok'>OK</CustomButton>\r\n                <CustomButton onClick={handleCancel} name='cancel'>Cancel</CustomButton>\r\n            </div>\r\n        </NewCardInputContainer>\r\n    )\r\n}\r\n\r\nexport default NewCardInput;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport CardList from \"./components/card-list/card-list.component\";\r\nimport SearchBox from \"./components/search-box/search-box.component\";\r\nimport Spinner from \"./components/spinner/spinner.component\";\r\nimport NewCardInput from \"./components/new-card-input/new-card-input.component\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchCards } from './redux/card/card.actions';\r\nimport { setInputVisible } from './redux/input/input.actions'\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {  \r\n  const dispatch = useDispatch();\r\n  const cards = useSelector(state => state.card.cards);\r\n  const visible = useSelector(state => state.input.isVisible);\r\n\r\n  const isLoading = useSelector(state => state.card.isLoading)\r\n  const [searchField, setSearchField] = useState(\"\");\r\n\r\n  const handleClick = () => {\r\n    dispatch(setInputVisible(true))\r\n  }\r\n\r\n  const handleScroll = async () => {    \r\n    let { innerHeight, scrollY, document: { body: { offsetHeight }}} = window;\r\n    if (innerHeight + scrollY >= offsetHeight + 48 && !isLoading && cards.length !== 0) {\r\n      dispatch(fetchCards(5));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {  \r\n    if (cards.length === 0) {\r\n      dispatch(fetchCards(5));      \r\n    }\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n\r\n    return ()=> {\r\n      window.removeEventListener(\"scroll\", handleScroll)\r\n    }\r\n  }, [cards]); \r\n\r\n  const filteredCards = cards.filter((card) => (card.first_name.toLowerCase() + card.last_name.toLowerCase()).includes(searchField.toLowerCase()));\r\n\r\n  const onSearchChange = (event) => {\r\n    setSearchField(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">      \r\n      <nav>\r\n        <h1>Cat Contacts</h1>\r\n        <div className='search-container'>\r\n          <SearchBox onSearchChange={onSearchChange} />\r\n          <button className='add-cat' onClick={handleClick}>+</button>   \r\n        </div>      \r\n        <NewCardInput visible={visible}/>\r\n      </nav>\r\n      <CardList cards={filteredCards} />\r\n      <Spinner isFetching={isLoading} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import CardActionTypes from './card.types';\r\n\r\nconst INITIAL_STATE = {\r\n    cards: [],\r\n    isLoading: false,\r\n    error: ''\r\n}\r\n\r\nconst cardReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n\r\n        case CardActionTypes.FETCH_CARDS_SUCCESS: \r\n            return {\r\n                ...state,\r\n                cards: state.cards.concat(action.payload),\r\n                error: ''\r\n            }\r\n        \r\n        case CardActionTypes.FETCH_CARDS_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n\r\n        case CardActionTypes.SET_IS_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            }\r\n\r\n        case CardActionTypes.ADD_CARD: \r\n            return {\r\n                ...state,\r\n                cards: [action.payload].concat([...state.cards])\r\n            }\r\n        ;\r\n        case CardActionTypes.REMOVE_CARD: \r\n            return {\r\n                ...state,\r\n                cards: state.cards.filter((card, idx) => idx !== action.payload)\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default cardReducer;","import InputActionTypes from './input.types';\r\n\r\nconst initialState = {\r\n    isVisible: false,\r\n    firstName: '',\r\n    lastName: '',\r\n    email: ''\r\n}\r\n\r\nconst inputReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case InputActionTypes.SET_IS_VISIBLE:\r\n            return {\r\n                ...state,\r\n                isVisible: action.payload\r\n            }\r\n        case InputActionTypes.CLEAR_INPUT_FIELDS:\r\n            return {\r\n                ...state,\r\n                firstName: '',\r\n                lastName: '',\r\n                email: ''\r\n            }\r\n        case InputActionTypes.SET_USER_INPUT:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default inputReducer;","import { combineReducers } from \"redux\";\r\nimport cardReducer from \"./card/card.reducer\";\r\nimport inputReducer from \"./input/input.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    card: cardReducer,\r\n    input: inputReducer\r\n});\r\n\r\nexport default rootReducer;","import { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport CardActionTypes from './card.types';\r\nimport { fetchCardsSuccess, fetchCardsFailure, setIsLoading } from './card.actions';\r\n\r\nfunction* fetchCards() {\r\n    try {\r\n        yield put (setIsLoading(true));\r\n        const data = yield fetch('https://random-data-api.com/api/users/random_user?size=10');\r\n        const users = yield data.json();\r\n        yield put (setIsLoading(false));\r\n        yield put (fetchCardsSuccess(users))\r\n    } catch(error) {\r\n        yield put (fetchCardsFailure(error.message))\r\n    }\r\n}\r\n\r\nfunction* onFetchCardsStart() {\r\n    yield takeLatest(CardActionTypes.FETCH_CARDS_START, fetchCards);\r\n}\r\n\r\nexport function* cardSagas() {\r\n    yield all([\r\n        call(onFetchCardsStart)\r\n    ]);\r\n}","import { all, call } from 'redux-saga/effects';\r\nimport { cardSagas } from './card/card.saga'\r\n\r\nfunction* rootSaga() {\r\n    yield all([\r\n        call(cardSagas)\r\n    ])\r\n}\r\n\r\nexport default rootSaga","import { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer from \"./root-reducer\";\r\nimport rootSaga from \"./root-saga\";\r\n\r\nconst sagaMiddleWare = createSagaMiddleware();\r\nconst middleWares = [logger, sagaMiddleWare];\r\nconst store = createStore(rootReducer, applyMiddleware(...middleWares));\r\nsagaMiddleWare.run(rootSaga)\r\n\r\nexport { store };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/redux-store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}